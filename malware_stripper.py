# -*- coding: utf-8 -*-
"""
github:redgrappe
"""

import os
from math import log
import numpy as np
from PIL import Image
import glob
PATH=input("Enter Malware Dataset Main Path: ")
stripped_bytes=[]

# .asm and .bytes procesing and stripping START
file_asm = glob.glob(PATH + '/**/*.asm', recursive=True)
file_bytes = glob.glob(PATH + '/**/*.bytes', recursive=True)
try:
    for l in range(len(file_asm)):
        stripped_bytes=[]
        name=file_asm[l]
        name =name[-24:-4]
        path=file_asm[l][:-24]
        print("path: ",path)
        print("file name: ",name) #name

        out_folder=path+"stripped\\"
        if not os.path.exists(out_folder):
            os.makedirs(out_folder)
            out_folder=path+"stripped\\"



        out_file_bytes=str(out_folder)+name+"STRIPED_"+".bytes"
        print("out: ", out_file_bytes)


        byts=open(file_bytes[l],mode='r',encoding="latin")
        print(file_bytes[l])
        data_bytes=byts.read()
        data_bytes = data_bytes.split('\n')
        byts.close()

        asm=open(file_asm[l],mode='r',encoding="latin")
        data_asm=asm.read()
        data_asm = data_asm.split('\n')
        asm.close()


        #ASM final .text adress extractor
        for i in range(len(data_asm)):
            a=data_asm[i].find('.text:')
            if a==0:
                try:
                    b=data_asm[i]
                    #print(b[6:14])
                    final_adress=str(b[6:14])

                except:
                    print("error appending .asm")

        #bytes procesing
        try:

            for o in range(len(data_bytes)):
                b=data_bytes[o]
                try:
                    stripped_bytes.append(b)
                    if final_adress == str(b[:8]):
                        print("end appending of : ",name," | ",stripped_bytes[-1] )
                        # save rewirite .bytes file to striped one
                        with open(out_file_bytes, 'w') as f:
                            f.write('\n'.join([''.join(l2) for l2 in stripped_bytes]))
                        o=len(data_bytes)+1

                except:
                    print("error appending .bytes")



        except:
            print("error on ")
 # .asm and .bytes procesing and stripping END
        del stripped_bytes
        del final_adress
        out_image=path+"images/"
        if not os.path.exists(out_image):
            os.makedirs(out_image)

        def saveimg(array,name):
            print (name)
            print (array.shape)
            if array.shape[1]!=16:
                assert(False)
            b=int((array.shape[0]*16)**(0.4))
            b=2**(int(log(b)/log(2))+1)
            a=int(array.shape[0]*16/b)
            print (a,b,array.shape)
            array=array[:int(a*b/16),:]

            array=np.reshape(array,(a,b))

            im = Image.fromarray(np.uint8(array))
            im.save(out_image+name[:-14]+'.jpg', "JPEG")

        files=os.listdir(out_folder)
        c=0
        for cc,x in enumerate(files):
            if 'STRIPED_.bytes' != x[-14:]: #skip .asm file
                continue
            print (cc)

            f=open(out_folder+x)#changed
            array=[]
            c+=1
            for line in f:
                xx=line.split()
                if len(xx)!=17:
                    continue

                array.append([int(i,16) if i!='??' else 0 for i in xx[1:] ])
            saveimg(np.array(array),x)
            del array
            f.close()

        print (c)
except:
    print("critical error")
print("All Done")
